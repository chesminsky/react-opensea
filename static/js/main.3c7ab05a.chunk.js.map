{"version":3,"sources":["components/search-form/SearchForm.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["SearchForm","props","seaport","accountAddress","state","owner","assets","handleChange","bind","handleSubmit","makeOffer","buy","console","log","this","search","event","setState","target","value","preventDefault","a","OpenSeaPort","Web3","givenProvider","networkName","Network","Rinkeby","api","getAssets","resp","asset","sellOrders","basePrice","toNumber","lastSale","totalPrice","tokenId","tokenAddress","createBuyOrder","startAmount","quantity","offer","alert","window","location","reload","item","hash","fulfillOrder","order","onSubmit","type","onChange","placeholder","className","map","i","src","imageUrl","collection","name","getPrice","getLast","onClick","React","Component","App","provider","undefined","accounts","detectProvider","getAccounts","detectEthereumProvider","request","method","rootNode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c7ab05a.chunk.js","sourcesContent":["import React from 'react';\nimport Web3 from 'web3';\nimport { OpenSeaPort, Network } from 'opensea-js';\nimport { OpenSeaAsset, Order, WyvernSchemaName } from 'opensea-js/lib/types';\n\ninterface MyState {\n\towner: string;\n\tassets: OpenSeaAsset[];\n}\n\ninterface MyProps {\n\taccountAddress: string;\n}\n\nexport class SearchForm extends React.Component<MyProps, MyState> {\n\tprivate seaport!: OpenSeaPort;\n\tprivate accountAddress!: string;\n\n\tconstructor(props: MyProps) {\n\t\tsuper(props);\n\t\tthis.state = { owner: '0x76b81595e372733d13688e6da9b1d5474c9c769b', assets: [] };\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.makeOffer = this.makeOffer.bind(this);\n\t\tthis.buy = this.buy.bind(this);\n\t\tthis.accountAddress = props.accountAddress;\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log('my account', this.accountAddress);\n\t\t\n\t\tthis.search();\n\t}\n\n\thandleChange(event: React.ChangeEvent<HTMLInputElement>) {\n\t\tthis.setState({ owner: event.target.value });\n\t}\n\n\thandleSubmit(event: React.FormEvent<HTMLFormElement>) {\n\t\tthis.search();\n\t\tevent.preventDefault();\n\t}\n\n\tasync search() {\n\t\t// This example provider won't let you make transactions, only read-only calls:\n\t\t// const provider = new Web3.providers.HttpProvider('https://mainnet.infura.io');\n\n\t\tthis.seaport = new OpenSeaPort(Web3.givenProvider, {\n\t\t\tnetworkName: Network.Rinkeby\n\t\t});\n\t\tconst resp = await this.seaport.api.getAssets({\n\t\t\towner: this.state.owner\n\t\t});\n\n\t\tthis.setState({ assets: resp.assets });\n\n\t\t//const prices = await Promise.all(this.state.assets.map((a) => this.getPrice(a)));\n\t\t//const prices = await this.getPrice(this.state.assets[1]);\n\n\t\t//console.log(prices);\n\t}\n\n\tgetPrice(asset: OpenSeaAsset) {\n\t\t// console.log(asset);\n\t\tif (!asset.sellOrders) {\n\t\t\treturn '';\n\t\t}\n\t\treturn asset.sellOrders![0].basePrice.toNumber() / 1000000000000000000;\n\t}\n\n\tgetLast(asset: OpenSeaAsset) {\n\t\t// console.log(asset);\n\t\tif (!asset.lastSale) {\n\t\t\treturn '';\n\t\t}\n\t\treturn +asset.lastSale.totalPrice / 1000000000000000000;\n\t}\n\n\tasync makeOffer(asset: OpenSeaAsset) {\n\t\tconsole.log(asset);\n\n\t\t// Token ID and smart contract address for a non-fungible token:\n\t\tconst { tokenId, tokenAddress } = asset;\n\t\t// The offerer's wallet address:\n\t\tconst accountAddress = this.accountAddress;\n\n\t\tlet offer;\n\t\ttry {\n\t\t\toffer = await this.seaport.createBuyOrder({\n\t\t\t\tasset: { tokenId, tokenAddress },\n\t\t\t\taccountAddress,\n\t\t\t\t// Value of the offer, in units of the payment token (or wrapped ETH if none is specified):\n\t\t\t\tstartAmount: 0.5,\n\t\t\t\tquantity: 1\n\t\t\t});\n\t\t} catch (e) {\n\t\t\talert(e);\n\t\t}\n\n\t\talert(offer);\n\n\t\twindow.location.reload();\n\t}\n\n\tasync buy(item: OpenSeaAsset) {\n\t\tif (!item.sellOrders) {\n\t\t\talert('no sell orders');\n\t\t\treturn\n\t\t}\n\t\tlet hash = '';\n\t\ttry {\n\t\t\thash = await this.seaport.fulfillOrder({ order: item.sellOrders![0], accountAddress: this.accountAddress });\n\t\t} catch (e) {\n\t\t\talert(e);\n\t\t\treturn;\n\t\t}\n\t\talert(hash);\n\n\t\twindow.location.reload();\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t<input type=\"text\" value={this.state.owner} onChange={this.handleChange} placeholder=\"owner adress\" />\n\t\t\t\t\t<button type=\"submit\">SEARCH</button>\n\t\t\t\t</form>\n\n\t\t\t\t<ul className=\"list\">\n\t\t\t\t\t{this.state.assets.map((item, i) => (\n\t\t\t\t\t\t<li key={item.name + i}>\n\t\t\t\t\t\t\t<img src={item.imageUrl || 'https://dummyimage.com/250x250/fff/000'} />\n\t\t\t\t\t\t\t<p>{item.collection.name}</p>\n\t\t\t\t\t\t\t<p>{item.name}</p>\n\t\t\t\t\t\t\t<p>Price: {this.getPrice(item)}</p>\n\t\t\t\t\t\t\t<p>Last: {this.getLast(item)}</p>\n\t\t\t\t\t\t\t{/* <button onClick={() => this.makeOffer(item)}>MAKE OFFER</button>\n\t\t\t\t\t\t\t<br/> */}\n\t\t\t\t\t\t\t<button onClick={() => this.buy(item)}>BUY</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import './App.css';\nimport { SearchForm } from './components/search-form/SearchForm';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport React from 'react';\nimport Web3 from 'web3';\n\nexport class App extends React.Component<{}, { provider: any; accounts: Array<any> }> {\n\tconstructor(props: {}) {\n\t\tsuper(props);\n\n\t\tthis.state = { provider: undefined, accounts: [] };\n\t\tthis.detectProvider = this.detectProvider.bind(this);\n\t\tthis.getAccounts = this.getAccounts.bind(this);\n\t}\n\n\tasync detectProvider() {\n\t\tthis.setState({ provider: undefined });\n\t\tconst provider = await detectEthereumProvider();\n\n\t\tif (provider) {\n\t\t\tconst accounts = await this.getAccounts();\n\t\t\tthis.setState({ provider, accounts });\n\t\t\tconsole.log(this.state);\n\t\t\t\n\t\t} else {\n\t\t\tthis.setState({ provider: null });\n\t\t}\n\t}\n\n\tgetAccounts() {\n\t\treturn Web3.givenProvider.request({ method: 'eth_requestAccounts' });\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.detectProvider();\n\t}\n\n\trender() {\n\t\tlet rootNode;\n\t\tif (typeof this.state.provider === 'undefined') {\n\t\t\trootNode = <div>Initializing...</div>;\n\t\t} else if (this.state.provider === null) {\n\t\t\trootNode = (\n\t\t\t\t<div>\n\t\t\t\t\t<p>Пожалуйста, установите Ethereum кошелек</p>\n\t\t\t\t\t<button onClick={this.detectProvider}>Продолжить</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\trootNode = <SearchForm accountAddress={this.state.accounts[0]}/>;\n\t\t}\n\n\t\treturn <div className=\"container\">{rootNode}</div>;\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}