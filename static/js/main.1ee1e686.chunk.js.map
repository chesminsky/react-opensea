{"version":3,"sources":["components/search-form/SearchForm.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["SearchForm","props","state","value","assets","handleChange","bind","handleSubmit","this","search","event","setState","target","preventDefault","a","provider","Web3","providers","HttpProvider","seaport","OpenSeaPort","networkName","Network","Main","api","getAssets","owner","resp","item","console","log","p","sellOrders","currentPrice","toNumber","className","map","src","imageUrl","collection","name","getPrice","tokenId","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oyBAUaA,EAAb,kDACC,WAAYC,GAAY,IAAD,8BACtB,cAAMA,IACDC,MAAQ,CAAEC,MAAO,GAAIC,OAAQ,IAElC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALE,EADxB,qDASC,WACCE,KAAKC,WAVP,0BAaC,SAAaC,GACZF,KAAKG,SAAS,CAAER,MAAOO,EAAME,OAAOT,UAdtC,0BAiBC,SAAaO,GACZF,KAAKC,SACLC,EAAMG,mBAnBR,2DAsBC,gCAAAC,EAAA,6DAEOC,EAAW,IAAIC,IAAKC,UAAUC,aAAa,6BAE3CC,EAAU,IAAIC,cAAYL,EAAU,CACzCM,YAAaC,UAAQC,OALvB,SAOoBJ,EAAQK,IAAIC,UAAU,CACxCC,MAAO,+CART,OAOOC,EAPP,OAWCnB,KAAKG,SAAS,CAAEP,OAAQuB,EAAKvB,SAX9B,gDAtBD,4EAoCC,SAASwB,GAA6B,IAAD,EAC9BC,QAAQC,IAAIF,GAElB,IAAMG,GAAI,UAACH,EAAKI,WAAuB,GAAGC,oBAAhC,eAA8CC,YAAuB,IAE/E,OADAL,QAAQC,IAAI,QAASC,GACdA,IAzCT,oBA4CC,WAAU,IAAD,OACR,OACC,8BAMC,oBAAII,UAAU,OAAd,SACE3B,KAAKN,MAAME,OAAOgC,KAAI,SAACR,GAAD,OACtB,+BACC,qBAAKS,IAAKT,EAAKU,WACf,4BAAIV,EAAKW,WAAWC,OACpB,4BAAIZ,EAAKY,OACT,wCAAW,EAAKC,SAASb,QAJjBA,EAAKc,oBAtDpB,GAAgCC,IAAMC,WCDvBC,MANf,WACC,OACC,cAAC,EAAD,KCOaC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1ee1e686.chunk.js","sourcesContent":["import React from 'react';\nimport Web3 from 'web3';\nimport { OpenSeaPort, Network } from 'opensea-js';\nimport { OpenSeaAsset, Order } from 'opensea-js/lib/types';\n\ninterface MyState {\n\tvalue: string;\n\tassets: OpenSeaAsset[];\n}\n\nexport class SearchForm extends React.Component<{}, MyState> {\n\tconstructor(props: {}) {\n\t\tsuper(props);\n\t\tthis.state = { value: '', assets: [] };\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.search();\n\t}\n\n\thandleChange(event: React.ChangeEvent<HTMLInputElement>) {\n\t\tthis.setState({ value: event.target.value });\n\t}\n\n\thandleSubmit(event: React.FormEvent<HTMLFormElement>) {\n\t\tthis.search();\n\t\tevent.preventDefault();\n\t}\n\n\tasync search() {\n\t\t// This example provider won't let you make transactions, only read-only calls:\n\t\tconst provider = new Web3.providers.HttpProvider('https://mainnet.infura.io');\n\n\t\tconst seaport = new OpenSeaPort(provider, {\n\t\t\tnetworkName: Network.Main\n\t\t});\n\t\tconst resp = await seaport.api.getAssets({\n\t\t\towner: '0x1a45356fd0e8c90c05f45a70a549531b5090f97e'\n\t\t});\n\n\t\tthis.setState({ assets: resp.assets });\n\t}\n\n\tgetPrice(item: OpenSeaAsset): number {\n        console.log(item);\n        \n\t\tconst p = (item.sellOrders as Order[])[0].currentPrice?.toNumber() as number / 1000000;\n\t\tconsole.log('price', p);\n\t\treturn p;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{/* <form onSubmit={this.handleSubmit}>\n\t\t\t\t\t<input type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder=\"search\" />\n\t\t\t\t\t<button type=\"submit\">SEARCH</button>\n\t\t\t\t</form> */}\n\n\t\t\t\t<ul className=\"list\">\n\t\t\t\t\t{this.state.assets.map((item) => (\n\t\t\t\t\t\t<li key={item.tokenId}>\n\t\t\t\t\t\t\t<img src={item.imageUrl} />\n\t\t\t\t\t\t\t<p>{item.collection.name}</p>\n\t\t\t\t\t\t\t<p>{item.name}</p>\n\t\t\t\t\t\t\t<p>Price: {this.getPrice(item)}</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import './App.css';\nimport { SearchForm } from './components/search-form/SearchForm';\n\nfunction App() {\n\treturn (\n\t\t<SearchForm />\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}