{"version":3,"sources":["components/search-form/SearchForm.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["SearchForm","props","seaport","accountAddress","state","owner","assets","isProfilePage","Boolean","handleChange","bind","handleSubmit","buy","console","log","this","search","event","setState","target","value","preventDefault","a","OpenSeaPort","Web3","givenProvider","networkName","Network","Rinkeby","api","getAssets","resp","asset","sellOrders","basePrice","toNumber","lastSale","totalPrice","item","alert","hash","fulfillOrder","order","window","location","reload","onSubmit","className","type","onChange","placeholder","map","i","src","imageUrl","collection","name","getPrice","getLast","onClick","React","Component","App","provider","undefined","accounts","detectProvider","getAccounts","detectEthereumProvider","request","method","rootNode","basename","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dbca915.chunk.js","sourcesContent":["import React from 'react';\nimport Web3 from 'web3';\nimport { OpenSeaPort, Network } from 'opensea-js';\nimport { OpenSeaAsset, Order, WyvernSchemaName } from 'opensea-js/lib/types';\n\ninterface MyState {\n\towner: string;\n\tassets: OpenSeaAsset[];\n\tisProfilePage: boolean;\n}\n\ninterface MyProps {\n\taccountAddress: string;\n\towner?: string;\n}\n\nexport class SearchForm extends React.Component<MyProps, MyState> {\n\tprivate seaport!: OpenSeaPort;\n\tprivate accountAddress!: string;\n\n\tconstructor(props: MyProps) {\n\t\tsuper(props);\n\n\t\tconst defOwner = '0x76b81595e372733d13688e6da9b1d5474c9c769b';\n\t\tthis.state = { owner: this.props.owner || defOwner, assets: [], isProfilePage: Boolean(this.props.owner) };\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.buy = this.buy.bind(this);\n\t\tthis.accountAddress = props.accountAddress;\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log('my account', this.accountAddress);\n\n\t\tthis.search();\n\t}\n\n\thandleChange(event: React.ChangeEvent<HTMLInputElement>) {\n\t\tthis.setState({ owner: event.target.value });\n\t}\n\n\thandleSubmit(event: React.FormEvent<HTMLFormElement>) {\n\t\tthis.search();\n\t\tevent.preventDefault();\n\t}\n\n\tasync search() {\n\t\t// This example provider won't let you make transactions, only read-only calls:\n\t\t// const provider = new Web3.providers.HttpProvider('https://mainnet.infura.io');\n\n\t\tthis.seaport = new OpenSeaPort(Web3.givenProvider, {\n\t\t\tnetworkName: Network.Rinkeby\n\t\t});\n\t\tconst resp = await this.seaport.api.getAssets({\n\t\t\towner: this.state.owner\n\t\t});\n\n\t\tthis.setState({ assets: resp.assets });\n\n\t\t//const prices = await Promise.all(this.state.assets.map((a) => this.getPrice(a)));\n\t\t//const prices = await this.getPrice(this.state.assets[1]);\n\n\t\t//console.log(prices);\n\t}\n\n\tgetPrice(asset: OpenSeaAsset) {\n\t\t// console.log(asset);\n\t\tif (!asset.sellOrders) {\n\t\t\treturn '';\n\t\t}\n\t\treturn asset.sellOrders![0].basePrice.toNumber() / 1000000000000000000;\n\t}\n\n\tgetLast(asset: OpenSeaAsset) {\n\t\t// console.log(asset);\n\t\tif (!asset.lastSale) {\n\t\t\treturn '';\n\t\t}\n\t\treturn +asset.lastSale.totalPrice / 1000000000000000000;\n\t}\n\n\tasync buy(item: OpenSeaAsset) {\n\t\tif (!item.sellOrders) {\n\t\t\talert('no sell orders');\n\t\t\treturn;\n\t\t}\n\t\tlet hash = '';\n\t\ttry {\n\t\t\thash = await this.seaport.fulfillOrder({ order: item.sellOrders![0], accountAddress: this.accountAddress });\n\t\t} catch (e) {\n\t\t\talert(e);\n\t\t\treturn;\n\t\t}\n\t\talert(hash);\n\n\t\twindow.location.reload();\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form onSubmit={this.handleSubmit} className={this.state.isProfilePage ? 'hidden' : ''}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={this.state.owner}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tplaceholder=\"owner adress\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button type=\"submit\">SEARCH</button>\n\t\t\t\t</form>\n\n\t\t\t\t<ul className=\"list\">\n\t\t\t\t\t{this.state.assets.map((item, i) => (\n\t\t\t\t\t\t<li key={item.name + i}>\n\t\t\t\t\t\t\t<img src={item.imageUrl || 'https://dummyimage.com/250x250/fff/000'} />\n\t\t\t\t\t\t\t<p>{item.collection.name}</p>\n\t\t\t\t\t\t\t<p>{item.name}</p>\n\t\t\t\t\t\t\t<p>Price: {this.getPrice(item)}</p>\n\t\t\t\t\t\t\t<p>Last: {this.getLast(item)}</p>\n\t\t\t\t\t\t\t<button className={this.state.isProfilePage ? 'hidden' : ''} onClick={() => this.buy(item)}>\n\t\t\t\t\t\t\t\tBUY\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import './App.css';\nimport { SearchForm } from './components/search-form/SearchForm';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport React from 'react';\nimport Web3 from 'web3';\nimport { BrowserRouter as HashRouter, Switch, Route, Link } from 'react-router-dom';\n\nexport class App extends React.Component<{}, { provider: any; accounts: Array<any> }> {\n\tconstructor(props: {}) {\n\t\tsuper(props);\n\n\t\tthis.state = { provider: undefined, accounts: [] };\n\t\tthis.detectProvider = this.detectProvider.bind(this);\n\t\tthis.getAccounts = this.getAccounts.bind(this);\n\t}\n\n\tasync detectProvider() {\n\t\tthis.setState({ provider: undefined });\n\t\tconst provider = await detectEthereumProvider();\n\n\t\tif (provider) {\n\t\t\tconst accounts = await this.getAccounts();\n\t\t\tthis.setState({ provider, accounts });\n\t\t\tconsole.log(this.state);\n\t\t} else {\n\t\t\tthis.setState({ provider: null });\n\t\t}\n\t}\n\n\tgetAccounts() {\n\t\treturn Web3.givenProvider.request({ method: 'eth_requestAccounts' });\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.detectProvider();\n\t}\n\n\trender() {\n\t\tlet rootNode;\n\t\tif (typeof this.state.provider === 'undefined') {\n\t\t\trootNode = <div>Initializing...</div>;\n\t\t} else if (this.state.provider === null) {\n\t\t\trootNode = (\n\t\t\t\t<div>\n\t\t\t\t\t<p>Пожалуйста, установите Ethereum кошелек</p>\n\t\t\t\t\t<button onClick={this.detectProvider}>Продолжить</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\trootNode = <SearchForm accountAddress={this.state.accounts[0]} />;\n\t\t}\n\n\t\treturn (\n\t\t\t<HashRouter basename='/'>\n\t\t\t\t<div>\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/\">Home</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/profile\">Profile</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</nav>\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/profile\">\n\t\t\t\t\t\t\t\t<h2>Your assets</h2>\n\t\t\t\t\t\t\t\t<SearchForm accountAddress={this.state.accounts[0]} owner={this.state.accounts[0]}/>\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t\t\t{rootNode}\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</HashRouter>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}